name: Auto Re-run Failed Workflows

on:
  schedule:
    # Check every 30 minutes for failed workflows
    - cron: '*/30 * * * *'
  workflow_dispatch:

jobs:
  rerun-failed:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install @octokit/rest
        
    - name: Re-run failed workflows
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node << 'EOF'
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        
        console.log('🔄 Checking for failed workflows to re-run...');
        
        // Get recent failed workflow runs
        const runs = await octokit.rest.actions.listWorkflowRunsForRepo({
          owner: 'chiarasiniadvisor-bot',
          repo: 'public-datasets',
          status: 'completed',
          conclusion: 'failure',
          per_page: 10
        });
        
        console.log(`Found ${runs.data.workflow_runs.length} recent failed runs`);
        
        const rerunCandidates = [];
        
        for (const run of runs.data.workflow_runs) {
          const createdAt = new Date(run.created_at);
          const timeAgo = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60));
          
          // Only re-run recent failures (last 2 hours) and not already re-run
          if (timeAgo < 120 && !run.run_attempt || run.run_attempt === 1) {
            rerunCandidates.push({
              id: run.id,
              name: run.name,
              timeAgo: timeAgo,
              url: run.html_url
            });
          }
        }
        
        console.log(`Found ${rerunCandidates.length} candidates for re-run`);
        
        for (const candidate of rerunCandidates) {
          try {
            console.log(`\n🔄 Re-running ${candidate.name} (${candidate.timeAgo}m ago)...`);
            
            await octokit.rest.actions.reRunWorkflow({
              owner: 'chiarasiniadvisor-bot',
              repo: 'public-datasets',
              run_id: candidate.id
            });
            
            console.log(`✅ Successfully triggered re-run for ${candidate.name}`);
            
            // Wait a bit between re-runs to avoid rate limiting
            await new Promise(resolve => setTimeout(resolve, 5000));
            
          } catch (error) {
            console.log(`❌ Failed to re-run ${candidate.name}: ${error.message}`);
          }
        }
        
        if (rerunCandidates.length === 0) {
          console.log('✅ No failed workflows to re-run');
        } else {
          console.log(`\n🎯 Re-run triggered for ${rerunCandidates.length} workflows`);
        }
        EOF
        
    - name: Create re-run report
      if: always()
      run: |
        echo "# Auto Re-run Report" > rerun-report.md
        echo "Generated: $(date)" >> rerun-report.md
        echo "" >> rerun-report.md
        echo "## Summary" >> rerun-report.md
        echo "- Checked for failed workflows" >> rerun-report.md
        echo "- Triggered re-runs where appropriate" >> rerun-report.md
        echo "- All actions completed" >> rerun-report.md
        
        cat rerun-report.md
