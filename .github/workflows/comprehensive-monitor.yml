name: Comprehensive Actions Monitor

on:
  workflow_run:
    workflows: ["*"]  # Monitor ALL workflows
    types: [completed, requested]
  schedule:
    # Check every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  monitor-all-actions:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios @octokit/rest
        
    - name: Monitor all workflow runs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        node << 'EOF'
        const { Octokit } = require('@octokit/rest');
        const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
        
        console.log('üîç Monitoring all GitHub Actions...');
        
        // Get all recent workflow runs
        const runs = await octokit.rest.actions.listWorkflowRunsForRepo({
          owner: 'chiarasiniadvisor-bot',
          repo: 'public-datasets',
          per_page: 20
        });
        
        console.log(`üìä Found ${runs.data.workflow_runs.length} recent runs`);
        
        // Analyze each run
        const analysis = {
          total: runs.data.workflow_runs.length,
          successful: 0,
          failed: 0,
          in_progress: 0,
          cancelled: 0,
          skipped: 0,
          issues: []
        };
        
        for (const run of runs.data.workflow_runs) {
          const status = run.status;
          const conclusion = run.conclusion;
          const workflowName = run.name;
          const createdAt = new Date(run.created_at);
          const timeAgo = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60)); // minutes ago
          
          console.log(`\nüìã ${workflowName} (${timeAgo}m ago):`);
          console.log(`   Status: ${status}, Conclusion: ${conclusion}`);
          
          // Count by status
          if (status === 'completed') {
            if (conclusion === 'success') {
              analysis.successful++;
              console.log('   ‚úÖ SUCCESS');
            } else if (conclusion === 'failure') {
              analysis.failed++;
              console.log('   ‚ùå FAILED');
              analysis.issues.push({
                type: 'workflow_failure',
                workflow: workflowName,
                run_id: run.id,
                url: run.html_url,
                created_at: run.created_at,
                time_ago: timeAgo
              });
            } else if (conclusion === 'cancelled') {
              analysis.cancelled++;
              console.log('   ‚èπÔ∏è CANCELLED');
            } else if (conclusion === 'skipped') {
              analysis.skipped++;
              console.log('   ‚è≠Ô∏è SKIPPED');
            }
          } else if (status === 'in_progress') {
            analysis.in_progress++;
            console.log('   üîÑ IN PROGRESS');
          }
          
          // Check for specific problematic patterns
          if (timeAgo < 30 && conclusion === 'failure') { // Failed in last 30 minutes
            analysis.issues.push({
              type: 'recent_failure',
              workflow: workflowName,
              run_id: run.id,
              url: run.html_url,
              time_ago: timeAgo
            });
          }
        }
        
        // Generate comprehensive report
        const report = `# Comprehensive Actions Monitor Report
Generated: ${new Date().toISOString()}

## Summary
- **Total Runs**: ${analysis.total}
- **Successful**: ${analysis.successful} ‚úÖ
- **Failed**: ${analysis.failed} ‚ùå
- **In Progress**: ${analysis.in_progress} üîÑ
- **Cancelled**: ${analysis.cancelled} ‚èπÔ∏è
- **Skipped**: ${analysis.skipped} ‚è≠Ô∏è

## Issues Detected
${analysis.issues.length > 0 ? analysis.issues.map(issue => 
  `- **${issue.type}**: ${issue.workflow} (${issue.time_ago}m ago) - [View Run](${issue.url})`
).join('\n') : 'No issues detected ‚úÖ'}

## Recent Activity (Last 30 minutes)
${runs.data.workflow_runs
  .filter(run => {
    const createdAt = new Date(run.created_at);
    const timeAgo = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60));
    return timeAgo < 30;
  })
  .map(run => {
    const createdAt = new Date(run.created_at);
    const timeAgo = Math.floor((Date.now() - createdAt.getTime()) / (1000 * 60));
    return `- **${run.name}**: ${run.status}/${run.conclusion} (${timeAgo}m ago)`;
  })
  .join('\n') || 'No recent activity'}

## Health Status
${analysis.failed === 0 ? 'üü¢ All systems operational' : 
  analysis.failed > 3 ? 'üî¥ Multiple failures detected' : 
  'üü° Some issues detected'}`;

        console.log('\nüìä COMPREHENSIVE REPORT:');
        console.log(report);
        
        // Save report to file
        require('fs').writeFileSync('actions-monitor-report.md', report);
        
        // Exit with error code if there are critical issues
        if (analysis.failed > 3) {
          console.log('\n‚ùå CRITICAL: Multiple workflow failures detected!');
          process.exit(1);
        } else if (analysis.issues.length > 0) {
          console.log('\n‚ö†Ô∏è WARNING: Some issues detected');
          process.exit(0);
        } else {
          console.log('\n‚úÖ All workflows healthy');
          process.exit(0);
        }
        EOF
        
    - name: Create issue for critical failures
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('actions-monitor-report.md', 'utf8');
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'critical-failure',
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® CRITICAL: Multiple workflow failures detected - ${new Date().toISOString()}`,
              body: report,
              labels: ['critical-failure', 'monitoring', 'urgent']
            });
          }
          
    - name: Update monitoring status
      if: success()
      run: |
        echo "‚úÖ All workflows are healthy"
        echo "üìä Monitoring completed successfully"
